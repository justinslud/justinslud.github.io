<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Justin Slud</title><link href="https://justinslud.github.io/" rel="alternate"></link><link href="https://justinslud.github.io/feeds/all-en.atom.xml" rel="self"></link><id>https://justinslud.github.io/</id><updated>2021-01-18T00:00:00-05:00</updated><entry><title>Hutter Prize Goal Progress Report 1</title><link href="https://justinslud.github.io/hp1.html" rel="alternate"></link><published>2021-01-18T00:00:00-05:00</published><updated>2021-01-18T00:00:00-05:00</updated><author><name>Justin Slud</name></author><id>tag:justinslud.github.io,2021-01-18:/hp1.html</id><summary type="html">&lt;p&gt;This post is to update on my project to build a text compressor. I began this project in January 2020. &lt;strong&gt;My goal is to get on the Hutter Prize leaderboard.&lt;/strong&gt; It is probably too ambitious, but I will try. It has been a great learning experience regardless.&lt;/p&gt;
&lt;p&gt;I don't expect …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This post is to update on my project to build a text compressor. I began this project in January 2020. &lt;strong&gt;My goal is to get on the Hutter Prize leaderboard.&lt;/strong&gt; It is probably too ambitious, but I will try. It has been a great learning experience regardless.&lt;/p&gt;
&lt;p&gt;I don't expect anyone to read this or care about it or even understand my notes, but I want to hold myself accountable to writing these reports. However, I do plan on writing more general posts about data compression. &lt;/p&gt;
&lt;h3&gt;January&lt;/h3&gt;
&lt;p&gt;03&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read c++ implementation of LZ77&lt;/li&gt;
&lt;li&gt;started snippets file for c++ notes&lt;/li&gt;
&lt;li&gt;learned about c++ command line arguments, g++ flags, hex to binary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;04&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wrote python scipt to get samples of enwik9 dataset&lt;/li&gt;
&lt;li&gt;use python's bytes function and bitarray library to practice using bits and bytes&lt;/li&gt;
&lt;li&gt;started making project folders in CodeBlocks&lt;/li&gt;
&lt;li&gt;downloaded lpaq8 compressor and read some of it&lt;/li&gt;
&lt;li&gt;watch Compressor Head videos&lt;/li&gt;
&lt;li&gt;looked at enwik9 samples and thought about using redundancy in xml tags to code them more easily (I later abandoned this idea since most of the data lies within the text and not the tags)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;05&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read and wrote down example of Huffman coding and Burrows Wheeler transform&lt;/li&gt;
&lt;li&gt;discovered encode.su, the forum about compression, but didn't understand the very technical discussions and didn't get much out of the meta-discussions&lt;/li&gt;
&lt;li&gt;wrote basic c++ functions equivalent to python's split and join&lt;/li&gt;
&lt;li&gt;read and followed along (actually writing their code into my own file and running it for better understanding) c++ implementation of Huffman coding&lt;/li&gt;
&lt;li&gt;added a decoder for Huffman-encoded strings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;06&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copied and modified c++ code to display progress bar in console&lt;/li&gt;
&lt;li&gt;benchmarked enwik samples on lpaq8e and wrote down compression time, compression ratio, memory used, and decompression time&lt;/li&gt;
&lt;li&gt;wrote down example of LZ77 coding&lt;/li&gt;
&lt;li&gt;read some of Matt Mahoney's work on context mixing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;07&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;played with c++ bitset and bitwise operators&lt;/li&gt;
&lt;li&gt;downloaded and started reading paq8hpany_src, a context mixing program used as part of a Hutter Prize winner&lt;/li&gt;
&lt;li&gt;learned about c++ templates&lt;/li&gt;
&lt;li&gt;read P. Skiblinski's papers about reversible text transformations for preprocessing which improve paq8's context mixing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;08&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setup bibliography to keep track of papers, code samples, compression programs, books, etc&lt;/li&gt;
&lt;li&gt;checked computer to see how to free up more RAM, decided I can worry about it more later&lt;/li&gt;
&lt;li&gt;read textFilter, the preprocessor for paq8&lt;/li&gt;
&lt;li&gt;compiled and ran paq8 on enwik samples&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;11&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;debug paq8 to step through and look for error&lt;/li&gt;
&lt;li&gt;lookup other programs on Large Text Compression Benchmark&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;12&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;switched to visual studio code for IDE&lt;/li&gt;
&lt;li&gt;learned debugging and configuring build/debug tasks in VSCode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read Matt Mahoney's data analysis of enwik9&lt;/li&gt;
&lt;li&gt;read about using neural networks for PPM and PAQ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;14&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;download c minimal unit test library and use it on sample scripts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;15&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;download c++ minimal neural network library and try (and fail) using&lt;/li&gt;
&lt;li&gt;download cmix compression program and explore file structure&lt;/li&gt;
&lt;li&gt;thought about idea where 2 different symbols share the same code and the pre-code details the switching order of the 2 symbols occurrences (later abandoned due to the superiority of adaptive statistical coding and the confusion different characters in unexpected places would mess up character prediction)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;17&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write forward Burrows Wheeler transform in python for binary strings and try repeating transform and using Run-Length encoding to reduce size&lt;/li&gt;
&lt;li&gt;read cmix runner and encoder/IO functions and take notes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try and compile stripped down version of cmix&lt;/li&gt;
&lt;li&gt;learn/use more of g++ and makefile&lt;/li&gt;
&lt;/ul&gt;</content><category term="Blog"></category><category term="compression"></category></entry><entry><title>Projects</title><link href="https://justinslud.github.io/projects.html" rel="alternate"></link><published>2020-11-01T00:00:00-04:00</published><updated>2020-11-01T00:00:00-04:00</updated><author><name>Justin Slud</name></author><id>tag:justinslud.github.io,2020-11-01:/projects.html</id><summary type="html">&lt;h1&gt;Big Projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="##wikipedia-current-events-analysis"&gt;Wikipedia Current Events Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##virtual-reality-surface-viewer"&gt;Virtual Reality Surface Viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Small Projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="##anki-command-line-tool"&gt;Anki Command Line Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##sudoku-solver"&gt;Sudoku Solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##database-browser"&gt;Database Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##virtual-reality-cube-menu"&gt;Virtual Reality Cube Menu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;!-- ##Wikipedia Current News Analysis --&gt;
&lt;h2 id='#wikipedia-current-events-analysis'&gt;Wikipedia Current Events Analysis&lt;/h2&gt;

&lt;p&gt;&lt;a href='https://github.com/justinslud/scrape-wikipedia-current-events'&gt;&lt;img src='./images/wiki_heatmap.png' width="400" height="400"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[This project is still in progress]&lt;/p&gt;
&lt;h3&gt;What&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Web scraper to get around 300 pages or 100,000 news headlines from Wikipedia. Can …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Big Projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="##wikipedia-current-events-analysis"&gt;Wikipedia Current Events Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##virtual-reality-surface-viewer"&gt;Virtual Reality Surface Viewer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Small Projects&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="##anki-command-line-tool"&gt;Anki Command Line Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##sudoku-solver"&gt;Sudoku Solver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##database-browser"&gt;Database Browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="##virtual-reality-cube-menu"&gt;Virtual Reality Cube Menu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;!-- ##Wikipedia Current News Analysis --&gt;
&lt;h2 id='#wikipedia-current-events-analysis'&gt;Wikipedia Current Events Analysis&lt;/h2&gt;

&lt;p&gt;&lt;a href='https://github.com/justinslud/scrape-wikipedia-current-events'&gt;&lt;img src='./images/wiki_heatmap.png' width="400" height="400"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[This project is still in progress]&lt;/p&gt;
&lt;h3&gt;What&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Web scraper to get around 300 pages or 100,000 news headlines from Wikipedia. Can be run as a command line tool&lt;/li&gt;
&lt;li&gt;Script to clean each headline and its metadata&lt;/li&gt;
&lt;li&gt;Jupyter notebook to visualize trends and analyze entire dataset&lt;/li&gt;
&lt;li&gt;Jupyter notebook to perform various machine learning tasks such as predicting what year a headline is from&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I often check the Wikipedia current events portal and was curious what types of events are the most popular and how that has changed in the 26 years wikipedia has been sharing these headlines&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BeautifulSoup (for scraping Wikipedia pages)&lt;/li&gt;
&lt;li&gt;Regular expressions (for extracting data and parsing HTML documents)&lt;/li&gt;
&lt;li&gt;Pandas and Matplotlib (for exploratory data analysis)&lt;/li&gt;
&lt;li&gt;NLTK (for text cleaning and natural language processing)&lt;/li&gt;
&lt;li&gt;Sklearn (for predictive modelling)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Where&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./wiki1.html"&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;November 2020&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, please see the &lt;a href="./wiki1.html"&gt;blog post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!-- ## Virtual Reality Surface Viewer --&gt;
&lt;h2 id='#virtual-reality-surface-viewer'&gt;Virtual Reality Surface Viewer&lt;/h2&gt;

&lt;p&gt;&lt;a href='https://math.nist.gov/~SRessler/jas23/MAINPROJECT/WEBVRSCENE/index1.html'&gt;&lt;img src='./images/vrviewer.png' width="400" height="400"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;What&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Virtual reality scene to view 3d mathematical surfaces from &lt;a href="https://dlmf.nist.gov"&gt;NIST's Digital Library&lt;/a&gt; which is also accessible as a webpage&lt;ul&gt;
&lt;li&gt;Rotation, scaling, shading, axes, selection, can be changed using Oculus Rift&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command line tool to convert 3d object files into other common formats&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Experimental environment for seeing how to interact with 3d objects in virtual reality for research and intuition purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A-Frame (JavaScript Virtual Reality Framework)&lt;/li&gt;
&lt;li&gt;NodeJS (for CLI)&lt;/li&gt;
&lt;li&gt;HTML and CSS (for &lt;a href="https://math.nist.gov/~SRessler/jas23/galleryofprojects/index.html"&gt;NIST website&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Where&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://math.nist.gov/~SRessler/jas23/galleryofprojects/index.html"&gt;NIST website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://math.nist.gov/~SRessler/jas23/MAINPROJECT/WEBVRSCENE/index1.html"&gt;Virtual Reality Scene&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slides.com/justinslud/nist-surf-2019"&gt;Presentation slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./articles/nist-vr.html"&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Summer 2019, National Insitute of Standards and Technology (NIST)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, please see the &lt;a href="./articles/nist-vr.html"&gt;blog post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!-- ## Anki Command Line Tool --&gt;
&lt;h2 id='#anki-command-line-tool'&gt;Anki Command Line Tool&lt;/h2&gt;

&lt;!-- &lt;a href='https://math.nist.gov/~SRessler/jas23/MAINPROJECT/WEBVRSCENE/index1.html'&gt;&lt;img src='./images/ankicli.png' width="400" height="400"/&gt;&lt;/a&gt; --&gt;

&lt;h3&gt;What&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Command line tool to convert to interact with &lt;a href="https://ankiweb.org"&gt;Anki&lt;/a&gt; flashcards and decks&lt;ul&gt;
&lt;li&gt;Get information on decks&lt;/li&gt;
&lt;li&gt;Add a card from the command line&lt;/li&gt;
&lt;li&gt;Add many cards into a deck from a csv file (instead of manually inputting)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I am a frequent user of anki and wanted to interact with their API and make the annoying process of making flashcards easier&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Argparse&lt;/li&gt;
&lt;li&gt;&lt;a href="..."&gt;ankiconnect api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Where&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/ankiCLI"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./articles/ankicli.html"&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;January 2020&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, please see the &lt;a href="./articles/ankicli.html"&gt;blog post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!-- ## Sudoku Solver --&gt;
&lt;h2 id='#sudoku-solver'&gt;Sudoku Solver&lt;/h2&gt;

&lt;!-- &lt;a href='https://math.nist.gov/~SRessler/jas23/MAINPROJECT/WEBVRSCENE/index1.html'&gt;&lt;img src='./images/ankicli.png' width="400" height="400"/&gt;&lt;/a&gt; --&gt;

&lt;h3&gt;What&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simple script which attempts to solve a Sudoku grid&lt;ul&gt;
&lt;li&gt;Checks if rest of 3x3 box is filled&lt;/li&gt;
&lt;li&gt;Checks if other 8 of the same number is filled in&lt;/li&gt;
&lt;li&gt;Checks if 2 of the same number force the third's place&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I wanted to practice object oriented programming and see how I could put common Sudoku strategies into code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Object-oriented programming&lt;/li&gt;
&lt;li&gt;Unittest&lt;/li&gt;
&lt;li&gt;Numpy&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Where&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/sudokuSolver"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./articles/sudoku-solver.html"&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;January 2020&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, please see the &lt;a href="./articles/sudoku-solver.html"&gt;blog post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!-- ## Database Browser --&gt;
&lt;h2 id='#database-browser'&gt;Database Browser&lt;/h2&gt;

&lt;!-- &lt;a href='https://math.nist.gov/~SRessler/jas23/MAINPROJECT/WEBVRSCENE/index1.html'&gt;&lt;img src='./images/ankicli.png' width="400" height="400"/&gt;&lt;/a&gt; --&gt;

&lt;h3&gt;What&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;User interface allowing you to select a database, view the rows, and filter rows by user-inputted values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I wanted to practice object oriented programming and see how I could put common Sudoku strategies into code&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Tkinter&lt;/li&gt;
&lt;li&gt;sqlite&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Where&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/dbbrowser"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./articles/db-browser.html"&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;January 2020&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, please see the &lt;a href="./articles/sudoku-solver.html"&gt;blog post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!-- ## Virtual Reality Cube Menu --&gt;
&lt;h2 id='#virtual-reality-cube-menu'&gt;Virtual Reality Cube Menu&lt;/h2&gt;

&lt;h3&gt;What&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cube attached to the hand in a virtual reality environment for easy manipulation of buttons and other settings&lt;ul&gt;
&lt;li&gt;Buttons&lt;/li&gt;
&lt;li&gt;Rotation to see all sides (or menus) on the cube&lt;/li&gt;
&lt;li&gt;Laser for selecting options&lt;/li&gt;
&lt;li&gt;Customization of shape, size, and colors&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I had extra time during my internship at NIST to experiment with new virtual reality user interfaces&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Aframe&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;Oculus rift&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Where&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/aframe-cubemenu"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="./articles/aframe-cubemenu.html"&gt;Blog post&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;When&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Summer 2019, National Insitute of Standards and Technology (NIST)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, please see the &lt;a href="./articles/aframe-cubemenu.html"&gt;blog post&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category><category term="projects"></category></entry><entry><title>About / Contact</title><link href="https://justinslud.github.io/about-contact.html" rel="alternate"></link><published>2020-10-29T08:00:00-04:00</published><updated>2020-10-29T08:00:00-04:00</updated><author><name>Justin Slud</name></author><id>tag:justinslud.github.io,2020-10-29:/about-contact.html</id><summary type="html">&lt;p&gt;I'm a math and economics student at the University of Maryland. After graduation, I'll be working as a junior data scientist.&lt;/p&gt;
&lt;p&gt;If you're reading this, I want to talk with you! You can &lt;a href="https://calendly.com/justinslud/30min"&gt;schedule a Zoom meeting&lt;/a&gt; or &lt;a href="mailto:justinslud@yahoo.com"&gt;email me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to reach out to me about anything. I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm a math and economics student at the University of Maryland. After graduation, I'll be working as a junior data scientist.&lt;/p&gt;
&lt;p&gt;If you're reading this, I want to talk with you! You can &lt;a href="https://calendly.com/justinslud/30min"&gt;schedule a Zoom meeting&lt;/a&gt; or &lt;a href="mailto:justinslud@yahoo.com"&gt;email me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feel free to reach out to me about anything. I love meeting new people and would be happy to set up a zoom meeting to talk about anything including but not limited to: data science, effective altruism, vegan food, and learning new things.&lt;/p&gt;
&lt;p&gt;&lt;a href="mailto:justinslud@yahoo.com"&gt;justinslud@yahoo.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/justinslud/resume/blob/main/JustinSlud_resume_Nov2020.pdf"&gt;Resume&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/justinslud"&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://linkedin.com/in/justinslud"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Wikipedia Current Events Analysis</title><link href="https://justinslud.github.io/wiki1.html" rel="alternate"></link><published>2020-10-29T00:00:00-04:00</published><updated>2020-10-29T00:00:00-04:00</updated><author><name>Justin Slud</name></author><id>tag:justinslud.github.io,2020-10-29:/wiki1.html</id><summary type="html">&lt;p&gt;Please see the general info for this project on the &lt;a href="https://justinslud.github.io/projects.html##wikipedia-current-events-analysis"&gt;Projects page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I split this project into 5 parts. The links are to the scripts and notebooks within this repository.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/1_scrape_headlines.py"&gt;Collecting the data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/2_explore_data.ipynb"&gt;Exploring and understanding the data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/3_model_subject.ipynb"&gt;Machine learning modelling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/4_make_api.py"&gt;Building a Flask API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/5_build_interface.py"&gt;Making an interactive Streamlit app …&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;Please see the general info for this project on the &lt;a href="https://justinslud.github.io/projects.html##wikipedia-current-events-analysis"&gt;Projects page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I split this project into 5 parts. The links are to the scripts and notebooks within this repository.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/1_scrape_headlines.py"&gt;Collecting the data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/2_explore_data.ipynb"&gt;Exploring and understanding the data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/3_model_subject.ipynb"&gt;Machine learning modelling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/4_make_api.py"&gt;Building a Flask API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/justinslud/scrape-wikipedia-current-events/blob/main/5_build_interface.py"&gt;Making an interactive Streamlit app&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can access the Streamlit app &lt;a href="https://share.streamlit.io/justinslud/streamlit-apps/main/app.py"&gt;here&lt;/a&gt; and clicking 'Wikipedia Current Events Analysis' on the sidebar.&lt;/p&gt;
&lt;p&gt;Here are a summary and notes on how I carried out the project:&lt;/p&gt;
&lt;h2&gt;1. Collecting the data&lt;/h2&gt;
&lt;p&gt;The Wikipedia current events portal has changed their HTML structure over the years. Despite not scraping all headlines, I still scraped over 50,000 headlines from 1995-2017.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;2. Exploring and understanding the data&lt;/h2&gt;
&lt;p&gt;I try and plot how often a term appears in headlines over the years, but this is not a good measure of how popular a term actually is. Wikipedia is heavily biased towards specific people and certain types of events. If I wanted to do an actual trend plot, my dataset of choice would be a media website, but even those are biased towards certain people and events.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;3. Exploring and understanding the data&lt;/h2&gt;
&lt;p&gt;Since this project was more exploratory, I did not have a specific prediction task in mind. I tried to predict which year a headline was from through KMeans clustering and logistic regression, but the heavy class imbalance (only 200 articles from 1995 but 2000 from 2015) made the task difficult.&lt;/p&gt;
&lt;p&gt;Predicting the subject of headlines was a more interesting and successful task. I had to reduce the number of possible categories to 9 by combining subjects. The logistic regression model had an average recall of .7, which is faily accurate considering a headline could be strongly related to 2 or more categories.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;4. Building a Flask API&lt;/h2&gt;
&lt;p&gt;I wanted to build an example API where a user could send headlines and receive my model's predictions and calculated probabilities. The actual prediction is taken care of by sci-kit, so the challenge here came from structuring the response JSON, handling 1 or many inputs, and handling errors.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;5. Making an interactive Streamlit app&lt;/h2&gt;
&lt;p&gt;The trend plotting exploratory data analysis and subject prediction look better with visuals on a website. Streamlit made this really straightforward and I used bokeh to make the trend plot.&lt;/p&gt;</content><category term="Blog"></category><category term="projects"></category></entry></feed>